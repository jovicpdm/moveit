{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/joao/moveit/src/context/ChallengeContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setlevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrenteExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setlevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrenteExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge,\n      experienceToNextLevel: experienceToNextLevel,\n      completeChallenge: completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengesProvider, \"Sm/A2eEkF1qGzDv1DlW5e2p4A2M=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/home/joao/moveit/src/context/ChallengeContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setlevel","currentExperience","setCurrenteExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","resetChallenge","completeChallenge","amount","finalExperience"],"mappings":";;;;;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,QAAkD,OAAlD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAwBA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAGP,OAAO,SAASI,kBAAT,OAAkE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,kBAC3CJ,QAAQ,CAAC,CAAD,CADmC;AAAA,MAC9DK,KAD8D;AAAA,MACvDC,QADuD;;AAAA,mBAElBN,QAAQ,CAAC,CAAD,CAFU;AAAA,MAE9DO,iBAF8D;AAAA,MAE3CC,qBAF2C;;AAAA,mBAGfR,QAAQ,CAAC,CAAD,CAHO;AAAA,MAG9DS,mBAH8D;AAAA,MAGzCC,sBAHyC;;AAAA,mBAKvBV,QAAQ,CAAC,IAAD,CALe;AAAA,MAK9DW,eAL8D;AAAA,MAK7CC,kBAL6C;;AAOrE,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;;AACA,WAASW,OAAT,GAAkB;AACdV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASY,iBAAT,GAA4B;AACxB,QAAMC,oBAAoB,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,MAAL,KAAgBnB,UAAU,CAACoB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGrB,UAAU,CAACiB,oBAAD,CAA5B;AAEAN,IAAAA,kBAAkB,CAACU,SAAD,CAAlB;AACH;;AAED,WAASC,cAAT,GAA0B;AACtBX,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASY,iBAAT,GAA6B;AACzB,QAAG,CAACb,eAAJ,EAAoB;AAChB;AACH;;AAHwB,QAKlBc,MALkB,GAKRd,eALQ,CAKlBc,MALkB;AAOzB,QAAIC,eAAe,GAAGnB,iBAAiB,GAAGkB,MAA1C;;AAEA,QAAGC,eAAe,IAAIb,qBAAtB,EAA4C;AACxCa,MAAAA,eAAe,GAAGA,eAAe,GAAGb,qBAApC;AACAG,MAAAA,OAAO;AACV;;AAEDR,IAAAA,qBAAqB,CAACkB,eAAD,CAArB;AACAd,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;;AAED,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACA,IAAA,KAAK,EACD;AACIJ,MAAAA,KAAK,EAALA,KADJ;AAEIE,MAAAA,iBAAiB,EAAjBA,iBAFJ;AAGIE,MAAAA,mBAAmB,EAAnBA,mBAHJ;AAIIO,MAAAA,OAAO,EAAPA,OAJJ;AAKIC,MAAAA,iBAAiB,EAAjBA,iBALJ;AAMIN,MAAAA,eAAe,EAAfA,eANJ;AAOIY,MAAAA,cAAc,EAAdA,cAPJ;AAQIV,MAAAA,qBAAqB,EAArBA,qBARJ;AASIW,MAAAA,iBAAiB,EAAjBA;AATJ,KAFJ;AAAA,cAcKpB;AAdL;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH;;GA5DeD,kB;;KAAAA,kB","sourcesContent":["import {createContext, useState, ReactNode } from 'react';\nimport challenges from '../../challenges.json';\n\ninterface Challenge {\n    type: 'body' | 'eye';\n    description: string;\n    amount: number\n}\n\ninterface ChallengesContextData {\n    level: number; \n    currentExperience: number; \n    experienceToNextLevel: number;\n    challengesCompleted: number;\n    levelUp: () => void;\n    startNewChallenge: () => void;\n    activeChallenge: Challenge;\n    resetChallenge: () => void;\n    completeChallenge: () => void\n}\n\ninterface ChallengesProviderProps {\n    children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\n\nexport function ChallengesProvider({ children }: ChallengesProviderProps){\n    const [level, setlevel] = useState(1);\n    const [currentExperience, setCurrenteExperience] = useState(0)\n    const [challengesCompleted, setChallengesCompleted] = useState(0)\n    \n    const [activeChallenge, setActiveChallenge] = useState(null)\n    \n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\n    function levelUp(){\n        setlevel(level + 1)\n    }\n\n    function startNewChallenge(){\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n        const challenge = challenges[randomChallengeIndex];\n\n        setActiveChallenge(challenge);\n    }\n\n    function resetChallenge() {\n        setActiveChallenge(null)\n    }\n\n    function completeChallenge() {\n        if(!activeChallenge){\n            return;\n        }\n\n        const {amount} = activeChallenge;\n\n        let finalExperience = currentExperience + amount;\n\n        if(finalExperience >= experienceToNextLevel){\n            finalExperience = finalExperience - experienceToNextLevel\n            levelUp();\n        }\n\n        setCurrenteExperience(finalExperience);\n        setActiveChallenge(null)\n        setChallengesCompleted(challengesCompleted + 1)\n    }\n\n    return (\n        <ChallengesContext.Provider \n        value={\n            {\n                level, \n                currentExperience, \n                challengesCompleted,\n                levelUp,\n                startNewChallenge,\n                activeChallenge,\n                resetChallenge,\n                experienceToNextLevel,\n                completeChallenge\n                }\n            }>\n            {children}\n        </ChallengesContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}