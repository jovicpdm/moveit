{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/joao/moveit/src/context/ChallengeContext.tsx\";\nimport { createContext, useState, useEffect } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setlevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrenteExperience\n  } = useState(0);\n  const {\n    0: challengesCompleted,\n    1: setChallengesCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null);\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n\n  function levelUp() {\n    setlevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n\n    if (Notification.permission === 'granted') {\n      new Notification('novo desafio', {\n        body: `valendo `\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completeChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrenteExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengesCompleted(challengesCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      currentExperience,\n      challengesCompleted,\n      levelUp,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n      completeChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/joao/moveit/src/context/ChallengeContext.tsx"],"names":["createContext","useState","useEffect","challenges","ChallengesContext","ChallengesProvider","children","level","setlevel","currentExperience","setCurrenteExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","levelUp","startNewChallenge","randomChallengeIndex","floor","random","length","challenge","permission","body","resetChallenge","completeChallenge","amount","finalExperience"],"mappings":";;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,EAA4CC,SAA5C,QAA6D,OAA7D;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAwBA,OAAO,MAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAGP,OAAO,SAASK,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAkE;AACrE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBP,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACQ,iBAAD;AAAA,OAAoBC;AAApB,MAA6CT,QAAQ,CAAC,CAAD,CAA3D;AACA,QAAM;AAAA,OAACU,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDX,QAAQ,CAAC,CAAD,CAA9D;AAEA,QAAM;AAAA,OAACY,eAAD;AAAA,OAAkBC;AAAlB,MAAwCb,QAAQ,CAAC,IAAD,CAAtD;AAEA,QAAMc,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,YAAY,CAACC,iBAAb;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASC,OAAT,GAAkB;AACdZ,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASc,iBAAT,GAA4B;AACxB,UAAMC,oBAAoB,GAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,MAAL,KAAgBrB,UAAU,CAACsB,MAAtC,CAA7B;AACA,UAAMC,SAAS,GAAGvB,UAAU,CAACmB,oBAAD,CAA5B;AAEAR,IAAAA,kBAAkB,CAACY,SAAD,CAAlB;;AAEA,QAAGR,YAAY,CAACS,UAAb,KAA4B,SAA/B,EAAyC;AACrC,UAAIT,YAAJ,CAAiB,cAAjB,EAAiC;AAC7BU,QAAAA,IAAI,EAAG;AADsB,OAAjC;AAGH;AACJ;;AAED,WAASC,cAAT,GAA0B;AACtBf,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASgB,iBAAT,GAA6B;AACzB,QAAG,CAACjB,eAAJ,EAAoB;AAChB;AACH;;AAED,UAAM;AAACkB,MAAAA;AAAD,QAAWlB,eAAjB;AAEA,QAAImB,eAAe,GAAGvB,iBAAiB,GAAGsB,MAA1C;;AAEA,QAAGC,eAAe,IAAIjB,qBAAtB,EAA4C;AACxCiB,MAAAA,eAAe,GAAGA,eAAe,GAAGjB,qBAApC;AACAK,MAAAA,OAAO;AACV;;AAEDV,IAAAA,qBAAqB,CAACsB,eAAD,CAArB;AACAlB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;;AAED,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACA,IAAA,KAAK,EACD;AACIJ,MAAAA,KADJ;AAEIE,MAAAA,iBAFJ;AAGIE,MAAAA,mBAHJ;AAIIS,MAAAA,OAJJ;AAKIC,MAAAA,iBALJ;AAMIR,MAAAA,eANJ;AAOIgB,MAAAA,cAPJ;AAQId,MAAAA,qBARJ;AASIe,MAAAA;AATJ,KAFJ;AAAA,cAcKxB;AAdL;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH","sourcesContent":["import {createContext, useState, ReactNode, useEffect } from 'react';\nimport challenges from '../../challenges.json';\n\ninterface Challenge {\n    type: 'body' | 'eye';\n    description: string;\n    amount: number\n}\n\ninterface ChallengesContextData {\n    level: number; \n    currentExperience: number; \n    experienceToNextLevel: number;\n    challengesCompleted: number;\n    levelUp: () => void;\n    startNewChallenge: () => void;\n    activeChallenge: Challenge;\n    resetChallenge: () => void;\n    completeChallenge: () => void\n}\n\ninterface ChallengesProviderProps {\n    children: ReactNode;\n}\n\nexport const ChallengesContext = createContext({} as ChallengesContextData);\n\n\nexport function ChallengesProvider({ children }: ChallengesProviderProps){\n    const [level, setlevel] = useState(1);\n    const [currentExperience, setCurrenteExperience] = useState(0)\n    const [challengesCompleted, setChallengesCompleted] = useState(0)\n    \n    const [activeChallenge, setActiveChallenge] = useState(null)\n    \n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2)\n    \n    useEffect(() => {\n        Notification.requestPermission()    \n    }, [])\n\n    function levelUp(){\n        setlevel(level + 1)\n    }\n\n    function startNewChallenge(){\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n        const challenge = challenges[randomChallengeIndex];\n\n        setActiveChallenge(challenge);\n\n        if(Notification.permission === 'granted'){\n            new Notification('novo desafio', {\n                body: `valendo `\n            })\n        }\n    }\n\n    function resetChallenge() {\n        setActiveChallenge(null)\n    }\n\n    function completeChallenge() {\n        if(!activeChallenge){\n            return;\n        }\n\n        const {amount} = activeChallenge;\n\n        let finalExperience = currentExperience + amount;\n\n        if(finalExperience >= experienceToNextLevel){\n            finalExperience = finalExperience - experienceToNextLevel\n            levelUp();\n        }\n\n        setCurrenteExperience(finalExperience);\n        setActiveChallenge(null)\n        setChallengesCompleted(challengesCompleted + 1)\n    }\n\n    return (\n        <ChallengesContext.Provider \n        value={\n            {\n                level, \n                currentExperience, \n                challengesCompleted,\n                levelUp,\n                startNewChallenge,\n                activeChallenge,\n                resetChallenge,\n                experienceToNextLevel,\n                completeChallenge\n                }\n            }>\n            {children}\n        </ChallengesContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}