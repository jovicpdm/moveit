{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/joao/moveit/src/context/CountdownContext.tsx\";\nimport { createContext, useContext, useState, useEffect } from \"react\";\nexport const CountdownContext = /*#__PURE__*/createContext({});\nlet countdownTimeout;\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.05 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.05 * 60);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      startCountdown,\n      resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/joao/moveit/src/context/CountdownContext.tsx"],"names":["createContext","useContext","useState","useEffect","CountdownContext","countdownTimeout","CountdownProvider","children","startNewChallenge","ChallengesContext","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;AAAA,SAAoBA,aAApB,EAAmCC,UAAnC,EAA+CC,QAA/C,EAAyDC,SAAzD,QAA0E,OAA1E;AAeA,OAAO,MAAMC,gBAAgB,gBAAGJ,aAAa,CAAC,EAAD,CAAtC;AACP,IAAIK,gBAAJ;AAEA,OAAO,SAASC,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAwC;AAC3C,QAAM;AAAEC,IAAAA;AAAF,MAAwBP,UAAU,CAACQ,iBAAD,CAAxC;AAEA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBT,QAAQ,CAAC,OAAO,EAAR,CAAhC;AACA,QAAM;AAAA,OAACU,QAAD;AAAA,OAAWC;AAAX,MAA0BX,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACY,WAAD;AAAA,OAAcC;AAAd,MAAgCb,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMc,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAC,EAAhB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAAyB;AACrBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AAED,WAASQ,cAAT,GAAyB;AACrBC,IAAAA,YAAY,CAACjB,gBAAD,CAAZ;AACAQ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,OAAO,EAAR,CAAP;AACH;;AAEDR,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAAyB;AACrBL,MAAAA,gBAAgB,GAAGkB,UAAU,CAAC,MAAI;AAC9BZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAF4B,EAE1B,IAF0B,CAA7B;AAGH,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AAC/BK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAL,MAAAA,iBAAiB;AACpB;AACJ,GAVQ,EAUN,CAACI,QAAD,EAAWF,IAAX,CAVM,CAAT;AAYA,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAI;AAChCM,MAAAA,OADgC;AAEhCG,MAAAA,OAFgC;AAGhCL,MAAAA,WAHgC;AAIhCF,MAAAA,QAJgC;AAKhCQ,MAAAA,cALgC;AAMhCC,MAAAA;AANgC,KAApC;AAAA,cAQKd;AARL;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH","sourcesContent":["import { ReactNode, createContext, useContext, useState, useEffect } from \"react\";\n\ninterface CountdownContextData {\n    minutes: number;\n    seconds: number;\n    hasFinished: boolean;\n    isActive: boolean;\n    startCountdown: () => void;\n    resetCountdown: () => void;\n}\n\ninterface CountdownProviderProps {\n    children: ReactNode;\n}\n\nexport const CountdownContext = createContext({} as CountdownContextData)\nlet countdownTimeout: NodeJS.Timeout;\n\nexport function CountdownProvider({ children }){\n    const { startNewChallenge } = useContext(ChallengesContext);\n\n    const [time, setTime] = useState(0.05 * 60);\n    const [isActive, setIsActive] = useState(false);\n    const [hasFinished, setHasFinished] = useState(false);\n    \n    const minutes = Math.floor(time/60);\n    const seconds = time % 60;    \n\n    function startCountdown(){\n        setIsActive(true)\n    }\n    \n    function resetCountdown(){\n        clearTimeout(countdownTimeout);\n        setIsActive(false)\n        setTime(0.05 * 60)\n    }\n    \n    useEffect(() => {\n        if (isActive && time > 0){\n            countdownTimeout = setTimeout(()=>{\n                setTime(time - 1)\n            }, 1000)\n        } else if( isActive && time === 0) {\n            setHasFinished(true);\n            setIsActive(false);\n            startNewChallenge();\n        }\n    }, [isActive, time])\n\n    return(\n        <CountdownContext.Provider value = {{\n            minutes,\n            seconds,\n            hasFinished,\n            isActive,\n            startCountdown,\n            resetCountdown\n        }}>\n            {children}\n        </CountdownContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}